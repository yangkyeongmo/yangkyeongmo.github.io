<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-02-02T18:45:49+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">잠이 안와 만든 기술 블로그</title><subtitle></subtitle><author><name>양경모, Gyeongmo Yang (a.k.a. Nathan)</name></author><entry><title type="html">전설로 떠나는 월가의 영웅 독후감</title><link href="http://localhost:4000/book/book-report/" rel="alternate" type="text/html" title="전설로 떠나는 월가의 영웅 독후감" /><published>2022-02-02T15:35:00+09:00</published><updated>2022-02-02T15:35:00+09:00</updated><id>http://localhost:4000/book/book-report</id><content type="html" xml:base="http://localhost:4000/book/book-report/">&lt;h1 id=&quot;전설로-떠나는-투자의-영웅&quot;&gt;전설로 떠나는 투자의 영웅&lt;/h1&gt;

&lt;h2 id=&quot;독서-계기&quot;&gt;독서 계기&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;최근 투자에 관심을 가지고 있다. 유행에 편승한 감도 없지 않지만 유튜브에서 본 얘기대로 일단 돈을 넣고 보니 남의 일이 되지 않아 공부를 해야겠다는 생각이 들었다. 관련해서 동영상을 찾아보다보면 피터 린치가 등장한다. 백발으로 나이는 있는것 같지만 눈에서 생기가 돌고 표정이 밝아 전혀 나이들어보이지 않는다. 한국의 뉴스에서 볼 수 있는, 혹은 주식 관련 방송에서 잠깐 스쳐지나갔던 경제학자들이 어두운 표정에 칙칙한 겉모습을 가진것과는 다르다. 딱딱하게 사실을 말하고 기계적으로 분석 업무를 하는듯한 모습과는 달리, 아마도 높은 지위의 청중이 앞에 있을듯한 강연대에 서서 유머러스하게 자신의 생각을 전달하는 모습을 보면 자연스레 멋있는 사람이라고 생각하게 된다. 그가 말하는 모습을 보고있으면 방금 유튜브에서 처음 본 사람임에도 가까운 사람처럼 느껴진다. 더욱 신기한 것은 당연한 말을 하는것 같은데도 헛소리처럼 들리지 않는다는 것이다. 오히려 투자의 본질을 말하고 있는것 같이 들린다. 그의 투자 성적을 보면 실제로 그런것 같기도 하다. 그의 명성과 그가 나온 영상을 보고있자니 어떤 생각을 가지고 있는지가 궁금해진다. 그런 생각을 가지고있던 중 찾은 책이 “전설로 떠나는 월가의 영웅”이다.&lt;/li&gt;
  &lt;li&gt;아직 20대 후반에 들어가는 어린 나이의 시각&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;으로 봤을 때, 세상은 아직 짧아보이고 그렇기 때문에 돈이 빠르게 모였으면 좋겠다. 내가 나이 마흔이 되기 전에 아무 일도 하지 않아도 되는 돈이 수중에 있었으면 하는 욕심이 생긴다. 이것이 욕심이라는 것을 안다. 이른 나이에 성공한 이는 많지 않고 일반적으로 안전하게 모인 부는 늦은 나이에 형성되는것 같다. 이전에 읽었던 스노우폭스 회장의 저서 “돈의 속성” 에서도 비슷한 얘기가 있어서, 일찍 성공한 사람은 불행하기 쉽다고 했던것 같다. 하지만 나는 다를것이라고 생각하게 되는 것이다. 이것도 욕심이라는 것을 안다. 그런 시각에서 봤을 때 적어도 3년, 길면 10년을 투자하는 장기투자의 접근법은 공감하기 쉽지 않다. 나는 지금 당장 돈을 벌어 좋은 컴퓨터도 사고 좋은 집에 가고싶은데, 10년을 기다리라니 가혹하게 들린다. 1년 뒤에 죽으면 10년 뒤가 무슨 의미가 있단 말인가? 공감가지는 않지만 장기투자의 접근법이 머리로는 이해된다. 시장은 변동성이 커 보인다. 장기적으로는 우상향을 따라간다고 하더라도 단기적으로 보면 출렁출렁거리고 있는것 같다. 그 많은 변동성들이 시간이 오래 지나고보면 다 상쇄될것이다. 장기투자는 그래서 장기투자보다 우월해보인다. 기다릴 수만 있으면, 변동성을 어느 정도 무시하고 큰 그림을 따라갈 수 있게된다. 피터 린치는 장기투자로 성적을 잘 낸 것으로 유명한것 같아 보였다. 어린 나이의 시각으로 봤을 때 장기투자는 공감할 수는 없지만 이해는 되는 전략이다. 어디 한번 공감할 수 있나 보자, 하는 생각으로 “전설”의 생각을 따라가보려고 했다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;느낀-점&quot;&gt;느낀 점&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;책을 읽고 보니 오히려 생각이 달라진 점이 있다. 장기 투자가 오히려 어린 나이에 하기 좋은 전략이라는 것이다. 평균 수명이 대략 80세라고 하고 내가 그 나이에 죽는다고 하자. 70세가 되어서 좋아보이는 기업에 돈을 넣는다고 해도 내가 죽기 전에는 큰 부가 쌓이는 것을 볼 수 없다. 자식에게 남겨줄 수는 있지만 결국 내가 쓸려고 투자를 하는 것이니 빛이 좀 바래는 것 같다. 하지만 어린 시기, 대략 20살 정도에 장기투자를 하면 10년이 지나도 30살이다. 30살이면 한창 직업적으로 왕성하게 활동할 때일 테니 투자에 성공했다면 다른 일을 위한 좋은 시드머니가 될 수 있을것이다. 굳이 사용하지 않더라도 불린 돈을 10년동안 더 불릴수도 있다. 지속적으로 수익을 내기는 어렵겠지만 그렇게 된다면 큰 수익을 낼 수 있을것 같다. 조금만 인내한다면 이후에 더 큰 이득을 볼 수 있을것이다.&lt;/li&gt;
  &lt;li&gt;저자는 초반에 일단 집을 구하고 투자를 시작하라고 한다. 집은 훌륭한 인플레이션 방어 수단이어서 투자 수단으로도 좋고 거처가 되기도 한다고 한다. 생각해보면 집의 가치는 잘 떨어지지 않는다. 주식에 비교해보자. 주식은 회사의 자산을 일부 사는 것이니 회사의 가치가 오르면 내 주식의 가치도 오른다. 반대로 회사가 망해버리면 내 주식도 휴지조각이 된다. 집은 주변에 새 인프라가 들어서거나 학교가 생기는 등 환경이 좋아디면 가격이 오르는것 같다. 재개발이 된다거나 수요가 늘어난다거나 하는 다른 요인이 있어도 가격이 오르는것 같다. 집의 가치는 언제 떨어질까? 노후되거나 주변에 혐오시설이 생긴다거나 하면 가치가 떨어지는것 같다. 혐오시설이 생기는 것은 어쩔 수 없다 하더라도 노후되면 재개발이 된다고 차익을 노리는 사람들도 있는듯 하다. 집이 없어져서 투자금이 몽땅 없어질 수 있을까? 사실 부동산에 대해서는 잘 모르지만 잠깐 생각해보자면 건물이 무너지거나 전쟁 등 천재지변이 나지 않는 이상 어려워보인다. 전쟁이 나면 국가적인 일이니 다같이 망하는 것이고 천재지변이 나면 나라나 회사에서 보상을 해준다. 양이 많지 않더라도 주식만큼 변동성이 크지는 않다. 한국의 경우는 모두가 서울을 원하니 아마 수요는 계속 있을 것이어서 가치가 떨어지기는 쉽지 않아보인다. 사람들은 항상 집을 필요로 한다. 다만 내가 느끼기에는 “주식하다가 망해도 몸 뉘일 집은 있어야된다” 라고 해석하는 것이 더 와닿는다.&lt;/li&gt;
  &lt;li&gt;책에서는 아마추어 투자자가 전문 투자가보다 더 유리한 위치에 있다고 한다. 전문 투자자는 투자만 공부하는 사람이고 아마추어 투자자는 실생활에 더 가깝기 때문인것으로 이해했다. 저자는 한 부부의 예시를 든다. 남편은 신문을 보고 어떤 기업을 살 지를 고민하고 있는데, 아내는 어느날 백화점에 가서 괜찮은 상품이 있었다고 한다. 남편은 그 말을 무시하고 신문에서 유명 투자 주식으로 손꼽는 기업들에 관심을 가진다. 아마 무엇인지 잘 이해도 하지 못했을 기술 기업들이다. 광학 디스크, MOSFET 등 알기 어려운 이름들인데 이해할 수 없어서 더 번지르르하다. 이후 시간이 지나서 아내가 말했던 기업의 가치는 꾸준히 상승하고 남편이 투자한 기업들은 신문에 나타났을 때 쯤 절정을 맞이하고 서서히 쇠퇴한다. 그러던 중 아내가 말했던 상품을 만들던 기업이 신문에 등장한다. 남편은 그제서야 아내에게 저번에 말했던 기업에 투자를 해봐야겠다고 하지만 아내는 요새 그 상품을 사고있지 않고 다른 곳이 더 좋아보인다고 한다. 남편은 그 말을 무시하고 신문을 따랐고 또 투자를 실패한다. 저자가 말하는 아마추어 투자자의 장점은 아내쪽에서 발생하는 이점인 것으로 보인다.
    &lt;ul&gt;
      &lt;li&gt;전문 투자자와 다르게 아마추어 투자자는 이미 다른 직업이 있고 투자는 부업으로 하는 것이므로 실생활에 더 가깝다. 개발자를 예로 들면 우리는 최근에 어떤 기업의 제품이 개발에 더 유리한지를 체감하고있기 때문에 어떤 기업이 더 좋은지를 미리 알고있는 것이다. 예로 약 1년 전쯤에 회사에서 Datadog을 도입했다. 나는 전혀 알지도 못하고있던 기업이었는데 회사에서 도입한다고 하니 사용해봤다가 지금도 꽤 편리하게 사용하고 있다. 우리가 직접 관리해야하는 것이 꽤 줄어들었고 대시보드를 직접 만들수도 있는 정도의 자유도도 있다. 분석용으로 정확하진 않지만 나름 유의미한 정보도 제공된다. 도입할 때 쯤 해당 기업을 조사해봤는데 매년 20%정도의 성장을 하고있었으나 순수익이 높지는 않았던것으로 기억한다. 경쟁자 포지션에 해당할 뉴렐릭도 살펴보았는데 성장률이 상대적으로 낮았고 가끔 역성장을 할 때도 있었던 것으로 기억한다. 실제로 주변에서 뉴렐릭의 제품을 사용한다는 얘기를 많이 듣지 못했으니 개발자의 수요가 회사의 성장을 따라간 것이 될것 같다.&lt;/li&gt;
      &lt;li&gt;저자는 기업의 조사에 시간을 들일것을 권장하고 있다. 기업 조사는 스토리 분석, 재무제표 확인 그리고 깊게 들어가면 회사 방문까지도 포함되는데 여튼 기업이 잘 되고 있는지 확인하려면 회사가 실제로 잘 굴러가고있는지 확인해야하니 조사를 해보라는 것이다. 저자 본인은 한 회사를 조사하는데 몇 시간 정도면 된다고 한다. 이것이 전문 투자자의 강력한 이점인것 같다. 전문 투자자는 실생활에 좀 덜 가깝겠지만 하루를 꼬박 사용해서 많은 기업을 분석할 수 있는 시간을 가지고있다. 아마추어 투자자는 그러기 어렵다. 본업이 있고 본업을 더 잘 하려면 공부해야한다. 하루를 대략 시뮬레이션해보자. 전문 투자자는 8시에 일어나 나갈 준비를 하고 9시부터 6시까지 8시간을 소비해 기업을 조사한다. 퇴근하고 나서 부업을 하거나 다른 기업을 더 조사할 수 있다. 같은 시간에 일어나 같은 시간에 일하는 아마추어 투자자는 퇴근하고 나서 7시부터 12시까지의 5시간 정도가 허용된다. 그나마도 본업에 충실한 아마추어 투자자는 하루 2시간을 본업에 대한 공부에 사용할 것이고 취미생활도 빼먹을 수 없다&lt;sup id=&quot;fnref:2&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;. 그렇다면 대략 하루 2시간 정도를 투자할 수 있다. 전문 투자자가 본업을 하면서 자연스럽게 획득하는 시간보다 1/4이나 된다. 이것도 성실할 때의 얘기고 그렇지 않으면 다른 일로 시간을 낭비하느라 더 적은 시간을 사용하게 될 것이다. 이렇게 봤을 때 아마추어 투자자가 이점을 가지려면 타게팅을 정말 잘 해야겠다는 생각이 든다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;아마추어도 아닌 초보자 입장에서 갑자기 기업 조사를 해보라고 하면 참 막막하다. 뭘 하는 것이 기업 조사인걸까? 다행히도 책에서는 어떤 것을 체크해야하는지를 알려준다. 기업을 대형우량주, 저성장주, 고성장주, 회생주 등으로 분류해서 각 유형의 기업에 대해서는 어떤 조사를 해야하는지 알려준다. 본인의 경험을 예시로 제시해주기도 해서 이해가 잘 된다. 제시한 것만 한다고 나도 피터 린치가 될 수는 없겠지만 어디서부터 시작하면 될지 알고있다는 것은 큰 자산이 된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;대학교때 20대 후반을 굉장히 나이든 것처럼 생각하는 문화가 있었다. 삼수생으로 들어온 형이 나이가 지금의 내 나이 정도가 되었음에도 “너도 내 나이만 되어봐. 이쯤만 되도 체력이 되게 부족해져.” 라는 투의 말을 했던것 같은데 대학교의 그런 문화가 발전을 저해하는것 같기도 하다. 20대면 아직 한참 어리다고 생각한다. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;본업이 취미와 맞는 사람이 아니라면 취미생활이 인생에서 빠졌을 때 인생이 힘들어질 가능성이 높다고 생각한다. 아마 본업이 취미와 맞지 않는 사람이 맞는 사람보다 세상에 훨씬 많을 것이다. &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>양경모, Gyeongmo Yang (a.k.a. Nathan)</name></author><category term="book" /><category term="finance" /><summary type="html">전설로 떠나는 투자의 영웅</summary></entry><entry><title type="html">PyInstaller를 사용하며 마주칠 수 있는 에러들</title><link href="http://localhost:4000/dev/about-possible-errors-of-pyinstaller/" rel="alternate" type="text/html" title="PyInstaller를 사용하며 마주칠 수 있는 에러들" /><published>2019-08-05T18:35:00+09:00</published><updated>2019-08-05T18:35:00+09:00</updated><id>http://localhost:4000/dev/about-possible-errors-of-pyinstaller</id><content type="html" xml:base="http://localhost:4000/dev/about-possible-errors-of-pyinstaller/">&lt;h1 id=&quot;목차&quot;&gt;목차&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;1.Pyinstaller&lt;/li&gt;
    &lt;li&gt;2.가능한 에러들&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;h1 id=&quot;pyinstaller&quot;&gt;PyInstaller&lt;/h1&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;pyinstaller-1&quot;&gt;PyInstaller?&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;PyInstaller freezes (packages) Python applicaitions into stand-alone executables, under Windows, GNU/Linux, …&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;PyInstaller는 Python 파일을 stand-alone 파일로 만들어줍니다.&lt;/p&gt;

&lt;p&gt;stand-alone이라고 하면, 외부 의존 없이 구동될 수 있다는 의미로, python(인터프리터)을 설치하지 않은 환경에서도 동작할 수 있습니다.&lt;/p&gt;

&lt;p&gt;따라서 컴퓨터를 모르는 사람에게 (실행 가능한) 파이썬 코드를 전달해줄 때 꽤 유용하게 사용할 수 있고, 그 외 사용하기 나름의 사용방법이 있습니다. 제 경우는 CLI에서 파이썬을 실행할 줄 모르시는 의뢰인에게 전달할 때 사용하거나, GUI 프로그램은 exe로 전달하는 것이 편하기 때문에 사용하고 있습니다.&lt;/p&gt;

&lt;h2 id=&quot;어떻게-가능한가&quot;&gt;어떻게 가능한가?&lt;/h2&gt;
&lt;p&gt;PyInstaller가 이렇게 stand-alone한 프로그램을 전달할 수 있는 것은, python 코드와 python 인터프리터를 한 exe, 또는 한 폴더 안에 복사해넣기 때문입니다.&lt;/p&gt;

&lt;p&gt;이를 위해서는 python utility인 Freeze를 이용하는 것으로 보입니다.&lt;/p&gt;

&lt;p&gt;Freeze를 이용해서 묶인 모듈을 “Frozen module”이라고 하는데, PyInstaller가 어떤 코드를 frozen module로 만들어서 폴더나 exe 안에 포함시키는 것 같습니다.&lt;/p&gt;

&lt;p&gt;stand-alone한 프로그램으로 만들려면 의존성 역시 해결되어야하는데, import문으로 선언된 의존성은 해결할 수 있다고 합니다.&lt;/p&gt;

&lt;p&gt;(동적으로 선언된 의존성이나 sys.path의 런타임 변경은 인식할 수 없다고 하니 주의하셔야겠습니다.)&lt;/p&gt;

&lt;h2 id=&quot;복사했으면-끝&quot;&gt;복사했으면 끝?&lt;/h2&gt;
&lt;p&gt;이제 코드, 인터프리터, 모듈 등이 모두 준비되었다면 bootloader가 실행 과정을 돕습니다.&lt;/p&gt;

&lt;p&gt;bootloader는 실행 파일의 시작에 불려져서, 임시 폴더를 만들고 임시 환경을 만들며 인터프리터를 복사해서 코드를 실행하게 합니다.&lt;/p&gt;

&lt;h2 id=&quot;os에-독립적인가&quot;&gt;OS에 독립적인가?&lt;/h2&gt;
&lt;p&gt;공식 문서에 따르면 OS에 독립적이지는 않을 수 있다고 합니다.&lt;/p&gt;

&lt;p&gt;이것이 python 코드 자체에 의한 것일 수도 있고(ex: 파일 시스템 차이), 현재 환경을 이용해서 exe를 만들기 때문일 수도 있겠습니다.&lt;/p&gt;

&lt;p&gt;우선 공식 문서에서는 환경(OS, 32/64비트 등)에 따라 다른 버전을 만들어서 배포할 것을 권장하고 있습니다.&lt;/p&gt;

&lt;p&gt;참고로, 현재 환경에서 사용중인 Python 인터프리터를 복사해서 사용하는 것이다 보니, Python 버전에도 신경쓰셔야 합니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;h1 id=&quot;가능한-에러들&quot;&gt;가능한 에러들&lt;/h1&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;아래에서는 PyInstaller를 사용하며 마주친 에러들을 설명합니다.&lt;/p&gt;

&lt;p&gt;추후 추가될 수 있습니다.&lt;/p&gt;

&lt;p&gt;들어가기에 앞서, PyInstaller 사용 시 생성되는 .spec 파일을 살펴보고 인터넷에 관련 지식을 검색하여 사용하는 것을 추천드립니다.&lt;/p&gt;

&lt;h2 id=&quot;one-file로-생성-시-cli에서는-실행이-되는데-exe-자체는-에러가-나옴&quot;&gt;one-file로 생성 시 CLI에서는 실행이 되는데 exe 자체는 에러가 나옴&lt;/h2&gt;

&lt;p&gt;다음 코드를 os, sys 모듈 이외의 모듈이 import되기 이전에 추가해주시면 됩니다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;hasattr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;frozen&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;environ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;PATH&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_MEIPASS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;environ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;PATH&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;b&gt;hasattr(sys, ‘frozen’)&lt;/b&gt; 은 sys 모듈에 frozen이 포함되었는지를 묻는 구문입니다.&lt;/p&gt;

&lt;p&gt;sys에 frozen이 포함되어있다면 현재 모듈이 frozen되었다는 것을 의미합니다.&lt;/p&gt;

&lt;p&gt;그 다음 줄에서는 os의 환경 변수에 sys._MEIPASS를 추가합니다.&lt;/p&gt;

&lt;p&gt;위에서 언급하였듯 bootloader는 임시 폴더를 생성하는데, 이 폴더의 이름이 _MEIxxxxxxx입니다(xxxxxxx는 어떤 숫자).&lt;/p&gt;

&lt;p&gt;sys._MEIPASS는 생성된 임시 폴더를 가리키고, 이를 환경 변수에 추가합니다.&lt;/p&gt;

&lt;h2 id=&quot;qt5coredll이-없음&quot;&gt;Qt5Core.dll이 없음&lt;/h2&gt;

&lt;p&gt;PyQt5를 사용하면서 겪은 문제이지만, 어떤 dll이 없다는 문구가 나온다면 .spec 파일의 binaries에 추가하시면 됩니다.&lt;/p&gt;

&lt;p&gt;다음 차례의 에러도 참고하시면 좋습니다.&lt;/p&gt;

&lt;h2 id=&quot;여러-binary를-추가&quot;&gt;여러 binary를 추가&lt;/h2&gt;

&lt;p&gt;다음과 같이 여러 binary를 추가했을 때 에러가 발생했습니다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Analysis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(...&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;binaries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;Qt5Core.dll&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;Qt5Gui.dll&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;Qt5Widgets.dll&apos;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;다음과 같이 변경했을 때 에러가 발생하지 않았습니다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Analysis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(...&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;binaries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;Qt5Core.dll&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;.&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;Qt5Gui.dll&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;.&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;Qt5Widgets.dll&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;.&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;binaries에 파일을 추가할 때, (‘파일 이름’, ‘상대 경로’)로 추가해야되는 듯 합니다.&lt;/p&gt;

&lt;h2 id=&quot;numpyrandomcommon-등이-없다는-에러&quot;&gt;numpy.random.common 등이 없다는 에러&lt;/h2&gt;

&lt;p&gt;hiddenimports에 추가해서 해결합니다.&lt;/p&gt;

&lt;p&gt;제 경우 .spec 파일의 hiddenimports를 다음과 같이 변경했을 때 에러가 나오지 않았습니다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Analysys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(...&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;hiddenimports&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;numpy.random&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;numpy.random.common&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;numpy.random.bounded_integers&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;numpy.random.entropy&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,]&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>양경모, Gyeongmo Yang (a.k.a. Nathan)</name></author><category term="dev" /><category term="python" /><summary type="html">목차 1.Pyinstaller 2.가능한 에러들</summary></entry><entry><title type="html">암호화 해시 함수 의뢰 진행 내용: 암호화 해쉬 함수와 PyQt5</title><link href="http://localhost:4000/dev/hash-function-quest/" rel="alternate" type="text/html" title="암호화 해시 함수 의뢰 진행 내용: 암호화 해쉬 함수와 PyQt5" /><published>2019-07-21T12:13:00+09:00</published><updated>2019-07-21T12:13:00+09:00</updated><id>http://localhost:4000/dev/hash-function-quest</id><content type="html" xml:base="http://localhost:4000/dev/hash-function-quest/">&lt;h1 id=&quot;목차&quot;&gt;목차&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;1.암호화 해시 함수?&lt;/li&gt;
    &lt;li&gt;2.PyQt5의 사용 가이드&lt;/li&gt;
    &lt;li&gt;3.PyInstaller의 사용 방법&lt;/li&gt;
    &lt;li&gt;4.진행 내용&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;1암호화-해시-함수&quot;&gt;1.암호화 해시 함수?&lt;/h1&gt;
&lt;p&gt;암호화 해시 함수란, &lt;a href=&quot;https://ko.wikipedia.org/wiki/암호화_해시_함수&quot;&gt;위키피디아:암호화 해시 함수&lt;/a&gt;에 따르면:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;암호화 해시 함수는 해시 함수의 일종으로, 해시값으로부터 원래의 입력값과의 관계를 찾기 어려운 성질을 가지는 경우를 의미한다. *&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;예를 들어, 해시 함수가 y=x같이 해시값(y)로부터 키값(x)를 알기 쉬운 경우, 암호화 해시 함수에 해당될 수 없습니다. 암호화된 상태의 해시값을 보냈을 때 해킹 공격에 취약할 수 밖에 없겠군요.&lt;/p&gt;

&lt;p&gt;암호화 함수는 다음의 세 가지 성질을 만족해야합니다.&lt;/p&gt;

&lt;p&gt;작성자의 편의상, 아래 설명은 해시 함수 f, 키값 x, 해시값 y에 대해 y=f(x)의 관계가 성립할 것을 가정합니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;역상 저항성(preimage resistance): 어떤 y를 이용해 x를 찾는 것이 계산상 어렵다.&lt;/li&gt;
  &lt;li&gt;제 2 역상 저항성(second preimage resistance): 어떤 x에 대응되는 y가 있을 때, y를 바꾸지 않으면서 x를 변경하는 것이 계산상 어렵다.&lt;/li&gt;
  &lt;li&gt;충돌 저항성(collision resistance): 해시 충돌에 안전함. 어떤 y를 생성하는 서로 다른 x를 찾는 것이 어려움.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;다시 말해서, 아래와 같이 요약할 수 있을 것 같습니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;해시값을 이용한 역방향 계산이 어려울 것&lt;/li&gt;
  &lt;li&gt;기존 키값과 다른 키값을 입력했을 때 기존 해시값과 다른 해시값이 출력될 것&lt;/li&gt;
  &lt;li&gt;서로 다른 키값이 같은 해시값을 출력하지 않을 것&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;이에 대해 &lt;a href=&quot;https://jsungpark.tistory.com/35&quot;&gt;JSPark님이 서술하신 괜찮은 예시&lt;/a&gt;가 있는데, 간단히 요약하면 y=f(x)=x^2과 같은 1:1 대응이 아닌 함수는 f(2)=f(-2)=4로, 키값-해시값이 1:1대응이 되지 않아 원래 값을 알기 어렵습니다.&lt;/p&gt;

&lt;h2 id=&quot;암호화-해시-함수의-종류&quot;&gt;암호화 해시 함수의 종류&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;암호화 해시 함수의 종류&lt;/strong&gt;에는 SHA-0, SHA-1, SHA-256/224, SHA-512/384, SHA3-256/224, SHA3-512/384, MD5가 있습니다.&lt;/p&gt;

&lt;p&gt;SHA-0는 1993년 NSA에서 설계한 함수로, 정식 명칭은 SHA(Secure Hash Algorithm)입니다만 구분을 위해 SHA-0로 표기하며, SHA-1, SHA-256/224, SHA-512/384는 SHA-0의 변형입니다.&lt;/p&gt;

&lt;p&gt;SHA-3군은 비교적 최근인 2012년 10월에 공모전에서 최종 우승하여 표준안으로 선정된 알고리즘으로, 2015년에 NIST에서 SHA-3 표준을 발표했습니다. SHA-2군은 현재도 많이 쓰이고 있다고 합니다만, SHA-2군의 해시 알고리즘이 가까운 미래에 깨질 수 있어 안전하지 않다는 의견에 따라 새로운 알고리즘을 사용하는 SHA-3군에 대한 공모가 열린 것이라고 합니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.boannews.com/media/view.asp?idx=33102&amp;amp;kind=1&quot;&gt;2012년 기사&lt;/a&gt;에 따르면 SHA-2가 일정 기간동안은 일반적 용도로 사용되는데 문제가 없을 것이라고 합니다. 코인이나 블록체인쪽은 잘 모릅니다만 SHA-2군을 사용하는 예시로 비트코인이 있고, 그외 다양한 분야에서도 사용될 것으로 생각됩니다.보안이 철저해야할 코인 쪽에서 아직 SHA-2군을 사용한다는 것을 보면 아직 보안 이슈는 크지 않은 것이 아닌가 싶습니다.&lt;/p&gt;

&lt;p&gt;그 외로 MD5 알고리즘이 있는데, &lt;a href=&quot;https://ko.widipedia.org/wiki/MD5&quot;&gt;위키피디아:MD5&lt;/a&gt;에 따르면 1996년에 이미 MD5의 보안 이슈가 발견되어 다른 알고리즘을 사용할 것이 권고되었고, 2008년에는 MD5의 결함을 이용해 SSL 인증서를 변조하는 것이 가능함이 발표되었다고 합니다.&lt;/p&gt;

&lt;h2 id=&quot;해시-vs-암호화&quot;&gt;해시 vs 암호화&lt;/h2&gt;
&lt;p&gt;해시값을 만드는 것과 암호화는 다릅니다.&lt;/p&gt;

&lt;p&gt;해시값을 만들면 원래 값을 알 수 없습니다. 위에서도 설명했듯이, 암호화 해시 함수는 해시값을 이용해서 키값을 알기 어려워야 합니다.&lt;/p&gt;

&lt;p&gt;암호화는 입력값을 암호화했을 때, 복호화 가능해야 합니다.&lt;/p&gt;

&lt;p&gt;그렇다면 해시값을 어디에 어떻게 쓰는지가 궁금해집니다. 원래 값을 다시 만들 수 없는데, 어디에 쓰는걸까요?&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://se-you.tistory.com/11&quot;&gt;se-you님이 정리하신 자료&lt;/a&gt;에 따르면, 데이터베이스에 비밀번호를 저장할 때 비밀번호를 해시함수에 넣어서 나온 해시값을 데이터베이스에 저장하면 해커의 공격에 안전할 수 있다고 합니다. 사용자가 어떤 비밀번호를 입력했을 때, 입력된 값을 해시함수에 넣어서 데이터베이스에 저장된 아이디-(해시화된)비밀번호 쌍과 대입해보면 비밀번호가 맞는지 확인할 수 있겠네요.&lt;/p&gt;

&lt;h2 id=&quot;hashlib&quot;&gt;hashlib&lt;/h2&gt;
&lt;p&gt;다행스럽게도, Python을 사용한다면 해시 알고리즘이 hashlib이라는 라이브러리에서 제공됩니다!
[공식 링크]:https://docs.python.org/3/library/hashlib.html&lt;/p&gt;

&lt;p&gt;SHA-1부터 SHA3-256도 있고, MD5나 그 외의 암호화 해시 함수가 제공됩니다.&lt;/p&gt;

&lt;h1 id=&quot;2pyqt5&quot;&gt;2.PyQt5&lt;/h1&gt;
&lt;p&gt;PyQt5는 Python에서 활용할 수 있는 GUI 라이브러리입니다.&lt;/p&gt;

&lt;p&gt;원래 C++에서 사용할 수 있는 GUI 라이브러리가 Qt인데, 이 라이브러리를 Python에 이식하면서 Python의 간결함을 살릴 수 있는 라이브러리로 발전시켰다고 합니다.&lt;/p&gt;

&lt;p&gt;실제로, 사용해보았더니 굉장히 편리하며 GUI의 세계에 쉽게 입문할 수 있도록 도울 수 있는 훌륭한 라이브러리가 아닌가 싶습니다.&lt;/p&gt;

&lt;p&gt;기본적인 가이드는 Dardo님이 저술하신 PyQt5 Tutorial(&lt;a href=&quot;https://wikidocs.net/book/2165&quot;&gt;wikidocs link&lt;/a&gt;)에 잘 서술되어 있어 추가적인 서술은 삼가겠습니다. 서술된 내용을 따라가시다보면, Python 스킬이 높은 편이 아니시더라도 쓸만한 GUI 어플리케이션을 제작할 수 있을 것입니다.&lt;/p&gt;

&lt;p&gt;스킬이 늘어나고 시간이 남는다면 자필로 가이드를 작성해보아야겠습니다.&lt;/p&gt;

&lt;h1 id=&quot;3pyinstaller&quot;&gt;3.PyInstaller&lt;/h1&gt;
&lt;p&gt;PyQt5를 이용해서 GUI 프로그램을 만들었다면, 사용하기 쉽게 exe 파일로 실행할 수 있게 만들고싶어집니다. 이 경우의 해결책이 PyInstaller입니다.&lt;/p&gt;

&lt;h2 id=&quot;기본-사용방법&quot;&gt;기본 사용방법&lt;/h2&gt;
&lt;p&gt;PyInstaller는 .py 파일을 실행파일로 만들어주는 라이브러리로, 역시 간단하며 사용하기 쉽습니다. 기본적인 사용 방법은 위의 PyQt5 위키독스에 잘 서술되어 있습니다만, 간단히 요약하자면 다음과 같습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;설치
    &lt;blockquote&gt;
      &lt;p&gt;pip install pyinstaller&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;기본 사용 방법
    &lt;blockquote&gt;
      &lt;p&gt;pyinstaller test.py&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;명령어를 실행하면 test.py가 위치한 폴더에 dist/ 폴더가 생성되며, 이 폴더 안에 실행 파일이 위치하게 됩니다.&lt;/p&gt;

&lt;h2 id=&quot;추가-옵션&quot;&gt;추가 옵션&lt;/h2&gt;
&lt;p&gt;이 때 생성되는 test.spec 파일은 exe 파일 생성 방법을 지시하는 파일인데, 이 파일 안의 상수들을 ‘적절히’ 변경하면 app 이름을 바꾸는 등의 변경을 할 수 있습니다.&lt;/p&gt;

&lt;p&gt;이때 어떤 옵션도 없이 실행하면 실행 시 까만 cmd창이 같이 뜨고, exe파일만 나오는 것이 아니라 여러 파일이 함께 dist 폴더 안에 존재하게 됩니다.&lt;/p&gt;

&lt;p&gt;프로그램 창만 띄우고싶다면 –windowed 옵션을 추가합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;GUI 프로그램 창만 띄우기
    &lt;blockquote&gt;
      &lt;p&gt;pyinstaller –windowed test.py&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;여러 파일이 아니라 exe 파일 하나만 나오게 하고싶다면, –onefile 옵션을 추가합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;exe 파일만
    &lt;blockquote&gt;
      &lt;p&gt;pyinstaller –onefile test.py&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;exe 파일의 아이콘을 설정하고싶다면 –icon &lt;em&gt;icon위치&lt;/em&gt; 옵션을 추가합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;아이콘
    &lt;blockquote&gt;
      &lt;p&gt;pyinstaller test.py –icon icon.png&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;pyqt5와-관련된-이슈&quot;&gt;PyQt5와 관련된 이슈&lt;/h2&gt;
&lt;p&gt;왜 그런지는 잘 모르겠습니다만, PyQt5를 함께 이용할 때 exe파일이 제대로 실행되지 않는 이슈가 있습니다.&lt;/p&gt;

&lt;p&gt;실행이 잘 안 된다면, [.py 위치한 폴더]/dist/[app_name]/PyQt5/Qt/bin/에 PyQt5의 모든 bin 파일을 붙여넣기합니다.&lt;/p&gt;

&lt;p&gt;PyQt5의 모든 bin 파일은 Python을 설치하신 폴더에서 가져오는데, 구체적인 위치는 [Python 설치 위치(ex:C:\Python37)]/Lib/site-packages/PyQt5/Qt/bin/ 입니다.&lt;/p&gt;

&lt;p&gt;참고로 CLI에서 exe를 실행하면 에러 메시지를 볼 수 있으니 유용하게 활용하시길 바랍니다.&lt;/p&gt;

&lt;h1 id=&quot;4진행-내용&quot;&gt;4.진행 내용&lt;/h1&gt;
&lt;p&gt;의뢰자 분은 암호화 해시 함수를 이용해서 키값을 입력했을 때 해시값을 보여주는 프로그램을 요청하셨습니다.&lt;/p&gt;

&lt;p&gt;예시로 보여주신 그림이 다음과 같았는데, 아마 &lt;a href=&quot;https://www.convertstring.com/ko/Hash/SHA256&quot;&gt;온라인 해시 생성기 페이지&lt;/a&gt;를 보고 요청하신게 아닌가 싶습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/hash-function-example.jpg&quot; alt=&quot;예시 그림&quot; /&gt;&lt;/p&gt;

&lt;p&gt;찾아본 결과 1.암호화 해시 함수 에서 서술한 바와 같이 많은 해시 함수가 있었고, 분명 Python에 라이브러리가 있을것 같아 찾아본 결과 hashlib에서 충분히 많은 암호화 해시 함수를 제공하는 것을 알게되었습니다. 그래서 하는 김에 한 6개 정도는 같이 해드릴 수 있겠다 싶어 진행을 했습니다.&lt;/p&gt;

&lt;p&gt;제작 결과는 다음과 같습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/HashEncriptionProgram.gif&quot; alt=&quot;제작 결과&quot; /&gt;&lt;/p&gt;

&lt;p&gt;프로그램을 생각보다 간단하게 완성했는데, 전적으로 PyQt5와 hashlib의 간편함덕분이 아니었나 싶습니다.&lt;/p&gt;

&lt;p&gt;코드는 공개되어있으며, 다음 링크에서 확인하실 수 있습니다(&lt;a href=&quot;https://github.com/yangkyeongmo/hash_encription&quot;&gt;링크&lt;/a&gt;)&lt;/p&gt;</content><author><name>양경모, Gyeongmo Yang (a.k.a. Nathan)</name></author><category term="dev" /><category term="quest" /><summary type="html">목차 1.암호화 해시 함수? 2.PyQt5의 사용 가이드 3.PyInstaller의 사용 방법 4.진행 내용</summary></entry><entry><title type="html">Welcome to Jekyll!(Test)</title><link href="http://localhost:4000/test/first-post/" rel="alternate" type="text/html" title="Welcome to Jekyll!(Test)" /><published>2019-07-19T01:56:00+09:00</published><updated>2019-07-19T01:56:00+09:00</updated><id>http://localhost:4000/test/first-post</id><content type="html" xml:base="http://localhost:4000/test/first-post/">&lt;p&gt;Good day!&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;welcome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;visitor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;you&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Good day,&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;you&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;My github link: &lt;a href=&quot;https://github.com/yangkyeongmo&quot;&gt;my-github&lt;/a&gt;&lt;/p&gt;</content><author><name>양경모, Gyeongmo Yang (a.k.a. Nathan)</name></author><category term="test" /><summary type="html">Good day! def welcome(visitor=you): print(&quot;Good day,&quot;, you, &quot;!&quot;) My github link: my-github</summary></entry></feed>